package br.com.erudio.controllers;

import static org.hamcrest.CoreMatchers.is;

import static org.mockito.BDDMockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import br.com.erudio.model.Person;
import br.com.erudio.services.PersonServices;

@WebMvcTest // SOBE TODAS DEPENDENCIAS NECESSÁRIAS PARA EXECUTAR O CONTROLLER
public class PersonControllerTest {

	@Autowired
	private MockMvc mockMvc;       // INJETANDO MOCKMVC PARA FAZER REQUESIÇÕES NO CONTROLLER PARA ISSO ADC @Autowired
	
	@Autowired
	private ObjectMapper objectMapper;  // PARA PODER SERIALIZAR E DESIALIZAR JSON
	
	@MockBean
	private PersonServices service;     // @MockBean PARA INJEÇÃO DE DEPENDENCIAS DO SERVICES
	
	private Person person;
	
	@BeforeEach
	public void setup() {
		// Given / Arrange
		person = new Person("Leandro",
				"Costa", 
				"leandro@erudio.com",
				"Minas Gerais - Brasil", 
				"male");
	}
	
	@Test
	@DisplayName("JUnit test for Given Person Object When Create Person Should Return Saved Person")
	void testGivenPersonObject_WhenCreatePerson_ShouldReturnSavedPerson() throws Exception {
		
																	// ESTRUTURA DEFINIÇÃO DO TESTE
		// Given / Arrange
		given(service.create(any(Person.class)))	// SERVICE.CREATE RECEBE QUALQUER(ANY) DE PERSON.CLASS
			.willAnswer(invocation -> invocation.getArgument(0)); // ADICIOMNAMOS WILLRETURN/OU/ANSWER QUE É A RESPOSTA QUE ELE VAI DEVOLVER
																// + FUNÇÃO LAMBDA CHAMADA INVOCATION + ARGUMENT (0)
		// When Act
	ResultActions response = mockMvc.perform(post("/person")	// MOCKMVC QUE VAI PERFORMAR UMA OPERAÇÃO DO TIPO POST PARA O ENDPOINT PERSONCONTROLLER NO CAMINHO "/PERSON"
			.contentType(MediaType.APPLICATION_JSON)			// + CONTENT TYPE (MEDIA TYPE DO SPRINGFRAMEWORK + APPLICATION_JSON
			.content(objectMapper.writeValueAsString(person))); // QUANDO USAMOS POSTMAN, PASSAMOS UM CONTEUDO
															 	// NAO ADICIONAMOS TRY CATCH EM TESTES, ENTÃO ADICIONAMOS THROWS EXCEPTION
																// O TIPO DO MOCK É ResultActions CHAMADO response
	
	// VERIFICANDO O RESULTADO DA SAÍDA USANDO JSON PATH
	// Then Assert											
	response.andDo(print()). // IMPRIMI O JSON     // PEGAMOS A RESPONSE E VERIFICAMOS ATRIBUTO POR ATRIBUTO SE O CONTEÚDO É O QUE ESPERAMOS
		andExpect(status().isOk()) // ESPERAMOS O RESULTADO 200 OK
		.andExpect(jsonPath("$.firstName", is(person.getFirstName()))) // ESPERAMOS QUE O ATRIBUTO DO JSON PATH SEJA A MESMA CRIADA NO MOCK ACIMA
		.andExpect(jsonPath("$.lastName", is(person.getLastName())))
		.andExpect(jsonPath("$.email", is(person.getEmail())));
		
	
	@Test
	@DisplayName("JUnit test for test Given List Of Persons When Find All Persons Should Return Persons List")
	void testGivenListOfPersons_WhenFindAllPersons_ShouldReturnPersonsList() throws JsonProcessingException {
		
		// Given Act
		List<Person> persons = new ArrayList<>();
		persons.add(person);
		persons.add(new Person(
				"Leonardo",
				"Costa",
				"leonardo@erudio.com.br",
				"Uberlandia - Minas Gerais - Brasil",
				"Male"));
		given(service.findAll()).willReturn(persons);
		
		// When Act / REQUISIÇÃO
		ResultActions response = mockMvc.perform(get("/person")); // NÃO PASSAMOS PARAMETROS NO CORPO DA REQUISIÇÃO DO CORPO GET
	
		// Then / Assert
		response.
		 andExpect(status().isOk())
		 .andDo(print())
		 .andExpect(jsonPath("$.size()", is(persons.size())));
	}
}
