package br.com.erudio.controllers;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.jupiter.api.Assertions.*;

import static org.mockito.BDDMockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mysql.cj.x.protobuf.MysqlxSession.ResetOrBuilder;

import br.com.erudio.model.Person;
import br.com.erudio.services.PersonServices;

@WebMvcTest // SOBE TODAS DEPENDENCIAS NECESSÁRIAS PARA EXECUTAR O CONTROLLER
public class PersonControllerTest {

	@Autowired
	private MockMvc mockMvc;       // INJETANDO MOCKMVC PARA FAZER REQUESIÇÕES NO CONTROLLER PARA ISSO ADC @Autowired
	
	@Autowired
	private ObjectMapper objectMapper;  // PARA PODER SERIALIZAR E DESIALIZAR JSON
	
	@MockBean
	private PersonServices service;     // @MockBean PARA INJEÇÃO DE DEPENDENCIAS DO SERVICES
	
	private Person person;
	
	@BeforeEach
	public void setup() {
		// Given / Arrange
		person = new Person("Leandro",
				"Costa", 
				"leandro@erudio.com",
				"Minas Gerais - Brasil", 
				"male");
	}
	
	@Test
	@DisplayName("JUnit test for Given Person Object When Create Person Should Return Saved Person")
	void testGivenPersonObject_WhenCreatePerson_ShouldReturnSavedPerson() throws Exception {
		
																	// ESTRUTURA DEFINIÇÃO DO TESTE
		// Given / Arrange
		given(service.create(any(Person.class)))
			.willAnswer(invocation -> invocation.getArgument(0)); 
		
		// When Act
	ResultActions response = mockMvc.perform(post("/person")
			.contentType(MediaType.APPLICATION_JSON)
			.content(objectMapper.writeValueAsString(person)));
	
    	// Then Assert
	response.andDo(print()).
		andExpect(status().isOk())
		.andExpect(jsonPath("$.firstName", is(person.getFirstName())))
		.andExpect(jsonPath("$.lastName", is(person.getLastName())))
		.andExpect(jsonPath("$.email", is(person.getEmail())));
		
	}
}
