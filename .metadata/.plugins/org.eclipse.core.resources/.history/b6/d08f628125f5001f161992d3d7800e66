package br.com.erudio.services;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyString;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Optional;


import static org.mockito.BDDMockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import br.com.erudio.exceptions.EmailAlreadyExistsException;
import br.com.erudio.model.Person;
import br.com.erudio.repositories.PersonRepository;

@ExtendWith(MockitoExtension.class)
public class PersonServicesTest {


	@Mock
	private PersonRepository repository;
	
	@InjectMocks
	private PersonServices services;
	
	private Person person0;
	
	@BeforeEach
	public void setup() {
		// Given / Arrange
		person0 = new Person(
				"Leandro",
				"Costa",
				"leandro@erudio.com.br",
				"Uberlandia - Minas Gerais - Brasil",
				"Male");
	}
	
	@DisplayName("Given Person Object When Save Person then Return Person Object")
	@Test
	void testGivenPersonObject_WhenSavePerson_thenReturnPersonObject() {
		
		// Given / Arrange
		given(repository.findByEmail(anyString())).willReturn(Optional.empty());
		given(repository.save(person0)).willReturn(person0);
		
		// When / Act
		Person savedPerson = services.create(person0);
		
		// Then / Assert
		assertNotNull(savedPerson);
		assertEquals("Leandro", savedPerson.getFirstName());
		
	}
	
	@DisplayName("Given Existing Email When Save Person then Throws Exception")
	@Test
	void testGivenExistingEmail_WhenSavePerson_thenThrowsException() {
		
		// Given / Arrange
		given(repository.findByEmail(anyString())).willReturn(Optional.of(person0)); // Mock retornando pessoa q/ existe
			
		// When / Act
		assertThrows(EmailAlreadyExistsException.class, () -> {
			services.create(person0); // Quando chamar o services.create, lançara essa exceção.
		});
		
		// Then Assert
		verify(repository, never()).save(any(Person.class)); // Usamos o Mockito verify para ter certeza que o repository.save nao vai ser chamado
	}
	
	@DisplayName("JUnit test for Given People list When find all people then return people list")
	@Test
	void testGivenPeopleList_WhenFindAllPeople_thenReturnPeopleList() {
		
		// Given / Arrange
		Person person1 = new Person("Leonardo", 
				"Silva", 
				"leonardo@erudio.com", 
				"Minas Gerais - Brasil", 
				"male");
		
		given(repository.findAll()).willReturn(List.of(person0, person1)); // RETORNA 2 ITENS DA LISTA
		
		// When / Act
		List<Person> personsList = services.findAll(); // CERTIFICA SE QUANDO O SERVICES É CHAMADO ELE VOLTA OOS DOIS ITENS
		
		// Then Assert
		assertNotNull(personsList); // CONFERIR OS RESULTADOS
		assertEquals(2, personsList.size());
	}
	@DisplayName("JUnit test for Given Empty People list When find all people then return Empty people list")
	@Test
	void testGivenEmptyPeopleList_WhenFindAllPeople_thenReturnEmptyPeopleList() {
		
		// Given / Arrange
		
		
		given(repository.findAll()).willReturn(Collections.EMPTY_LIST); // RETORNA 2 ITENS DA LISTA
		
		// When / Act
		List<Person> personsList = services.findAll(); // CERTIFICA SE QUANDO O SERVICES É CHAMADO ELE VOLTA OOS DOIS ITENS
		
		// Then Assert
		assertTrue(personsList.isEmpty());
		assertEquals(0, personsList.size());
	}
	
	@DisplayName("JUnit test for Given PersonId When findById then Return Person Object")
	@Test
	void testGivenPersonId_WhenFindById_thenReturnPersonObject() {
		
		// Given / Arrange
		given(repository.findById(anyLong())).willReturn(Optional.of(person0));
		
		// When / Act
		Person savedPerson = services.findById(1L);
		
		// Then / Assert
		assertNotNull(savedPerson);
		assertEquals("Leandro", savedPerson.getFirstName());
		
	}
	@DisplayName("JUnit test for Given Person Object When Update Person then Return Update Person Object")
	@Test
	void testGivenPersonObject_WhenUpdatePerson_thenReturnUpdatePersonObject() {
		
		// Given / Arrange
		person0.setId(1L);
		given(repository.findById(anyLong())).willReturn(Optional.of(person0));
		
		person0.setFirstName("Leonardo");
		person0.setEmail("leonardo@erudio.com");
		
		given(repository.save(person0)).willReturn(person0);
		
		// When / Act
		Person updatePerson = services.update(person0);
		
		// Then / Assert
		assertNotNull(updatePerson);
		assertEquals("leonardo@erudio.com", updatePerson.getEmail());
		
	}
}
