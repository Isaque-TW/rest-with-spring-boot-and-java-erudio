package br.com.erudio.repositories;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;

import br.com.erudio.model.Person;

@DataJpaTest
class PersonRepositoryTest {

	@Autowired
	private PersonRepository repository;
	
	@DisplayName("Given Person Object when Save then Return Saved Person")
	@Test
	void testGivenPersonObject_whenSave_thenReturnSavedPerson() {
		
		// Given / Arrange
		Person person0 = new Person("Leandro", "Costa", "leandro@erudio.com", "Minas Gerais - Brasil", "male");
		
		// When / Act
		Person savedPerson = repository.save(person0);
		
		// Then / Assert
		assertNotNull(savedPerson);
		assertTrue(savedPerson.getId() > 0);

	}
	
	@DisplayName("Given Person List when Find All then Return Person List")
	@Test
	void testGivenPersonList_whenFindAll_thenReturnPersonList() {
		
		// Given / Arrange
		Person person0 = new Person("Leandro", 
				"Costa", 
				"leandro@erudio.com", 
				"Minas Gerais - Brasil", 
				"male");
		Person person1 = new Person("Leonardo", 
				"Silva", 
				"leonardo@erudio.com", 
				"Minas Gerais - Brasil", 
				"male");
		
		repository.save(person0);
		repository.save(person1);
		
		// When / Act
		List<Person> personList = repository.findAll();
		
		// Then / Assert
		assertNotNull(personList);
		assertEquals(2, personList.size());
		
	}
	
	@DisplayName("Given Person Object when FindById then Return Person Object")
	@Test
	void testGivenPersonObject_whenFindById_thenReturnPersonObject() {
		
		// Given / Arrange
		Person person0 = new Person("Leandro", "Costa", "leandro@erudio.com", "Minas Gerais - Brasil", "male");
		repository.save(person0);
		
		// When / Act
		Person savedPerson = repository.findById(person0.getId()).get();
		
		// Then / Assert
		assertNotNull(savedPerson);
		assertEquals(person0.getId(), savedPerson.getId());

	}
	
	@DisplayName("Given Person Object when FindByEmail then Return Person Object")
	@Test
	void testGivenPersonObject_whenFindByEmail_thenReturnPersonObject() {
		
		// Given / Arrange
		Person person0 = new Person("Leandro", "Costa", "leandro@erudio.com", "Minas Gerais - Brasil", "male");
		repository.save(person0);
		
		// When / Act
		Person savedPerson = repository.findByEmail(person0.getEmail()).get();
		
		// Then / Assert
		assertNotNull(savedPerson);
		assertEquals(person0.getId(), savedPerson.getId());
		
	}
	
	@DisplayName("Given Person Object when UpdatePerson then Return Updated Person Object")
	@Test
	void testGivenPersonObject_whenUpdatePerson_thenReturnUpdatedPersonObject() {
		
		// Given / Arrange
		Person person0 = new Person("Leandro", "Costa", "leandro@erudio.com", "Minas Gerais - Brasil", "male");
		repository.save(person0);  // Salva a Pessoa
		
		// When / Act
		Person savedPerson = repository.findByEmail(person0.getEmail()).get(); // Recupera a Pessoa
		savedPerson.setFirstName("Luiz");  // Update da Pessoa / Atualizando
		savedPerson.setEmail("luiz@erudio.com"); // Update
		
		Person updatedPerson = repository.save(savedPerson); // Verifica se a Pessoa esta sendo Atualizada
		
		
		
		// Then / Assert
		assertNotNull(updatedPerson); // Verifica se não está nulo
		assertEquals("Luiz", updatedPerson.getFirstName()); // Verifica se o Update é Realmente Luiz
		assertEquals("luiz@erudio.com", updatedPerson.getEmail());
		
	}
	
	@DisplayName("Given Person Object when Delete then Return Remove Person")
	@Test
	void testGivenPersonObject_whenDelete_thenReturnRemovePerson() {
		
		// Given / Arrange
		Person person0 = new Person("Leandro", "Costa", "leandro@erudio.com", "Minas Gerais - Brasil", "male");
		
		repository.save(person0);
		
		// When / Act
		repository.deleteById(person0.getId()); // Deletando a Pessoa sem Precisar AETAR o Id porque o Objeto acima faz isso.
		Optional<Person> personOptional = repository.findById(person0.getId()); // Usando o Objeto Optionalmpara deletar, podendo ter um resultado ou estar nulo
		
		// Then / Assert
		assertTrue(personOptional.isEmpty()); // Verifica se realmente está vazio/foi deletado

	}
	
	@DisplayName("JUnit test for Given firstName and lastName when findJPQL then Return Person Object")
	@Test
	void testGivenFirstNameAndLastName_whenFindJPQL_thenReturnPersonObject() {
		
		// Given / Arrange
		Person person0 = new Person("Leandro", "Costa", "leandro@erudio.com", "Minas Gerais - Brasil", "male");
		
		repository.save(person0);
		
		String firstName = "Leandro";
		String lastName = "Costa";
		
		// When / Act
		Person savedPerson = repository.findByJPQL("Leandro", "Costa");
		
		// Then / Assert
		assertNotNull(savedPerson);
		assertEquals(firstName, savedPerson.getFirstName());
		assertEquals(lastName, savedPerson.getLastName());

	}
	
	@DisplayName("JUnit test for Given firstName and lastName when findByJPQLNamedParameters then Return Person Object")
	@Test
	void testGivenFirstNameAndLastName_whenFindByJPQLNamedParameters_thenReturnPersonObject() {
		
		// Given / Arrange
		Person person0 = new Person("Leandro", "Costa", "leandro@erudio.com", "Minas Gerais - Brasil", "male");
		
		repository.save(person0);
		
		String firstName = "Leandro";
		String lastName = "Costa";
		
		// When / Act
		Person savedPerson = repository.findByJPQLNamedParameters(firstName, lastName);
		
		// Then / Assert
		assertNotNull(savedPerson);
		assertEquals(firstName, savedPerson.getFirstName());
		assertEquals(lastName, savedPerson.getLastName());

	}
	
	@DisplayName("JUnit test for Given firstName and lastName when findByNativeSQL then Return Person Object")
	@Test
	void testGivenFirstNameAndLastName_whenFindByNativeSQL_thenReturnPersonObject() {
		
		// Given / Arrange
		Person person0 = new Person("Leandro", "Costa", "leandro@erudio.com", "Minas Gerais - Brasil", "male");
		
		repository.save(person0);
		
		String firstName = "Leandro";
		String lastName = "Costa";
		
		// When / Act
		Person savedPerson = repository.findByNativeSQL(firstName, lastName);
		
		// Then / Assert
		assertNotNull(savedPerson);
		assertEquals(firstName, savedPerson.getFirstName());
		assertEquals(lastName, savedPerson.getLastName());
		
	}
	@DisplayName("JUnit test for Given firstName and lastName when findByNativeSQLwithNamedParameters then Return Person Object")
	@Test
	void testGivenFirstNameAndLastName_whenFindByNativeSQLwithNamedParameters_thenReturnPersonObject() {
		
		// Given / Arrange
		Person person0 = new Person("Leandro", "Costa", "leandro@erudio.com", "Minas Gerais - Brasil", "male");
		
		repository.save(person0);
		
		String firstName = "Leandro";
		String lastName = "Costa";
		
		// When / Act
		Person savedPerson = repository.findByNativeSQLwithNamedParameters(firstName, lastName);
		
		// Then / Assert
		assertNotNull(savedPerson);
		assertEquals(firstName, savedPerson.getFirstName());
		assertEquals(lastName, savedPerson.getLastName());
		
	}

}
