package br.com.erudio.integrationtests.controller;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.boot.test.context.SpringBootTest;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

import br.com.erudio.config.TestConfigs;
import br.com.erudio.integrationtests.testcontainers.AbstractIntegrationTest;
import br.com.erudio.model.Person;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.LogDetail;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.filter.log.ResponseLoggingFilter;
import io.restassured.specification.RequestSpecification;

@TestMethodOrder(OrderAnnotation.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)
public class PersonControllerIntegrationTest extends AbstractIntegrationTest{

	private static RequestSpecification specificantion;  	// Definindo as configs(Requests) entre os serviÃ§os //REST Assured
	private static ObjectMapper objectMapper;
	private static Person person;
	
	@BeforeAll
	public void setup() {
		// Given / Arrange
		objectMapper = new ObjectMapper();
		objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
		
		specificantion = new RequestSpecBuilder()
			 .setBasePath("/person")
			 .setPort(TestConfigs.SERVER_PORT)
			 	 .addFilter(new RequestLoggingFilter(LogDetail.ALL))
			 	.addFilter(new ResponseLoggingFilter(LogDetail.ALL))
			 .build();
		
		person = new Person("Leandro",
				"Costa", 
				"leandro@erudio.com",
				"Minas Gerais - Brasil", 
				"Male");
	}
	
	@Test
	@Order(1)
	@DisplayName("JUnit integration given Person when Create One Person Should Return A Person Object")
	void integrationTestGivenPersonObject_when_CreateOnePerson_ShouldReturnAPersonObject() throws JsonProcessingException {
		
		var content = given().spec(specificantion)
					.contentType(TestConfigs.CONTENT_TYPE_JSON)
					.body(person)
				.port(TestConfigs.SERVER_PORT)
				.when()
					.post()
				.then()
					.statusCode(200)
						.extract()
							.body()
								.asString();
		Person createdPerson =objectMapper.readValue(content, Person.class);
		
		person = createdPerson;
		
		assertNotNull(createdPerson);
		
		assertNotNull(createdPerson.getId());
		assertNotNull(createdPerson.getFirstName());
		assertNotNull(createdPerson.getLastName());
		assertNotNull(createdPerson.getAddress());
		assertNotNull(createdPerson.getGender());
		assertNotNull(createdPerson.getEmail());
		
		assertTrue(createdPerson.getId() > 0);
		assertEquals("Leandro", createdPerson.getFirstName());
		assertEquals("Costa", createdPerson.getLastName());
		assertEquals("Minas Gerais - Brasil", createdPerson.getAddress());
		assertEquals("male", createdPerson.getGender());
		assertEquals("leandro@erudio.com", createdPerson.getEmail());
	}
}




















